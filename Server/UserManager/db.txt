
int CUserManagerCom::OnDBGetRecordAck(CMsg & msg)
{
	int nTable;

	msg >> nTable;

	if (nTable == m_nDBSerial)
	{
		CUser* pUser;
		int nAckCode;
		msg >> (int&)pUser >> nAckCode;

		// Check this user pointer is valid
		CSessDesc* pDes = FindSessionByUser (pUser);
		if (!pDes)
			return 0;

		// if this serial-no is not on DB, check invalid.
		if (!nAckCode)
		{
			pUser->m_bCheckResult = LR_SN_INVALID;
			return 0;
		}
		
		// get serial-no data from message
		DWORD dwRegTime, dwLogTime, dwStartTime, dwEndTime, dwPayTime;
		msg >> pUser->m_wSerial
			>> pUser->m_bType
			>> pUser->m_strSerialPasswd
			>> dwRegTime
			>> dwLogTime
			>> dwStartTime
			>> dwEndTime
			>> pUser->m_strBank
			>> pUser->m_strPayName
			>> dwPayTime
			>> pUser->m_dwPrice;
		pUser->m_timeSerialReg = CTime (dwRegTime);
		pUser->m_timeSerialStart = CTime (dwStartTime);
		pUser->m_timeSerialEnd = CTime (dwEndTime);
		pUser->m_timeSerialPay = CTime (dwPayTime);

		CTimeSpan timespanValidDate (VALID_SERIAL_DATE, 0, 0, 0);
		CTime timeCurrent = CTime::GetCurrentTime ();

		// if current day is 180 days over registered day, check out-of-date
		if (pUser->m_timeSerialReg + timespanValidDate < timeCurrent)
			pUser->m_bCheckResult = LR_SN_OUTOFDATE;

		// if password is null, check not to be used.
		else if (pUser->m_strSerialPasswd == _T(""))
			pUser->m_bCheckResult = LR_SN_UNREG;

		// check if out-of-date
		else if (pUser->m_timeSerialStart > timeCurrent ||
			pUser->m_timeSerialEnd < timeCurrent)
			pUser->m_bCheckResult = LR_SN_OUTOFDATE;

		// else it is valid serial...
		else
		{
			pUser->m_bCheckResult = LR_SN_VALID;
			CheckSerialDup (pUser);

			CMsg msgDB;
			msgDB.ID (DB_SETRECORD_REQ) 
				<< m_nDBSerial << 0
				<< pUser->m_wSerial
				<< pUser->m_bType
				<< pUser->m_strSerialPasswd
				<< pUser->m_timeSerialReg.GetTime ()
				<< pUser->m_timeLog.GetTime ()
				<< pUser->m_timeSerialStart.GetTime ()
				<< pUser->m_timeSerialEnd.GetTime ()
				<< pUser->m_strBank
				<< pUser->m_strPayName
				<< pUser->m_timeSerialPay.GetTime ()
				<< pUser->m_dwPrice;
			m_desDB.Say (msgDB);
		}
	}
	else if (nTable == m_nDBUser)
	{
		CUser* pUser;
		int nAckCode;
		msg >> (int&)pUser >> nAckCode;

		// Check this user class pointer is valid
		CSessDesc* pDes = FindSessionByUser (pUser);
		if (!pDes)
			return 0;

		if (pUser->m_nState == CUser::stateWaitLogin)
		{
			// if this user id is not on DB, check unregistered.
			if (!nAckCode)
			{
				pUser->m_bLoginResult = LR_USER_UNREG;
				pUser->m_nState = CUser::stateNotLogin;
			}
			// else...
			else
			{
				CString strUserID, strPasswd;
				DWORD dwRegTime, dwLogTime;
				msg >> strUserID
					>> strPasswd
					>> pUser->m_wSerial
					>> pUser->m_strName
					>> pUser->m_strSocNo
					>> pUser->m_strAddr
					>> pUser->m_strTel
					>> pUser->m_strEMail
					>> dwRegTime
					>> dwLogTime
					>> pUser->m_wSerial;
				pUser->m_timeReg = CTime (dwRegTime);

				if (pUser->m_strUserID == strUserID &&
					pUser->m_strPasswd == strPasswd)
				{
					pUser->m_bLoginResult = LR_USER_VALID;
					CheckUserDup (pUser);

					CMsg msgDB;
					msgDB.ID (DB_SETRECORD_REQ) 
						<< m_nDBUser << 0
						<< pUser->m_strUserID
						<< pUser->m_strPasswd
						<< pUser->m_wSerial
						<< pUser->m_strName
						<< pUser->m_strSocNo
						<< pUser->m_strAddr
						<< pUser->m_strTel
						<< pUser->m_strEMail
						<< pUser->m_timeReg.GetTime ()
						<< pUser->m_timeLog.GetTime ()
						<< pUser->m_wSerial;
					m_desDB.Say (msgDB);

					msg
				}
				else
					pUser->m_bLoginResult = LR_USER_INVALID;
			}
		CMsg msgSend;
		msgSend.ID (UM_LOGIN_ACK) 
			<< pUser->m_nID 
			<< pUser->m_bLoginResult 
			<< pUser->m_bCheckResult;
		pDes->Say (msgSend);
	}

	return 0;
}

int CUserManagerCom::OnDBSetRecordAck(CMsg & msg)
{
	int nTable;

	msg >> nTable;

	if (nTable == m_nDBUser)
	{
		CUser* pUser;
		int nAckCode;
		msg >> (int&)pUser >> nAckCode;

		if (!pUser)
			return 0;

		CSessDesc* pDes = FindSessionByUser (pUser);
		if (!pDes)
			return 0;

		// if set record is failed...
		CMsg msgSend;
		msgSend.ID (UM_SETINFO_ACK) << pUser->m_nID;
		if (!nAckCode)
			msgSend << (BYTE)0;
		else
			msgSend << (BYTE)1;
		pDes->Say (msgSend);
	}
	else if (nTable == m_nDBSerial)
	{
		CUser* pUser;
		int nAckCode;
		msg >> (int&)pUser >> nAckCode;

		if (!pUser)
			return 0;

		CSessDesc* pDes = FindSessionByUser (pUser);
		if (!pDes)
			return 0;

		// if set record is failed...
		CMsg msgSend;
		msgSend.ID (UM_REGSN_ACK) << pUser->m_nID;
		if (!nAckCode)
			msgSend << (BYTE)0;
		else
		{
			pUser->m_bCheckResult = LR_SN_VALID;
			CheckSerialDup (pUser);

			msgSend << (BYTE)1;
		}
		pDes->Say (msgSend);
	}

	return 0;
}

int CUserManagerCom::OnDBInsertRecordAck(CMsg & msg)
{
	int nTable;

	msg >> nTable;

	if (nTable == m_nDBUser)
	{
		CUser* pUser;
		int nNumRec;
		msg >> (int&)pUser >> nNumRec;

		// Check this user class pointer is valid
		CSessDesc* pDes = FindSessionByUser (pUser);
		if (!pDes)
			return 0;

		CMsg msgSend;
		msgSend.ID (UM_REGUSER_ACK) << pUser->m_nID;
		if (nNumRec == 0)
			msgSend << (BYTE)0;
		else
		{
			pUser->m_bLoginResult = LR_USER_VALID;
			CheckUserDup (pUser);

			msgSend << (BYTE)1;
		}
		pDes->Say (msgSend);
	}

	return 0;
}

